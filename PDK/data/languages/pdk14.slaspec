# Specification for the PDK14 / SYM_85A instruction set
# used in chips such as the PMS152
# Partially based on reverse-engineered opcodes from here: https://free-pdk.github.io/instruction-sets/PDK14

# ROM is from 1.5k to 2k words
# SRAM is from 80 to 128 bytes
@include "pdk_common.sinc"

define token inst (16)
	op0_13=(0,13)

    op6_13=(6, 13)


#	op10_12=(10,12)
#	op8_12=(8,12)
#    op6_12=(6, 12)
#    op5_12=(5,12)
#	op4=(4,4)
#    op0_12=(0,12)
#	op0=(0,0)
#    
	io=(0,5)
#	
#	m6=(0,5)
#	m4=(0,3)
#	m3=(1,4)
#	
#	k10=(0,9)
#	k8=(0,7)
#	
#	n=(5,7)
;

#
#define register offset=0x60 size=2 [
#	Timer16
#];


attach variables [ io ] [
	flag   # 00
	_      # 01 
	sp     # 02
	clkmd  # 03
	inten  # 04
	intrq  # 05
	t16m   # 06
	_
	misc   # 08
	tm2b   # 09
	eoscr  # 0A
	_
	integs # 0C
	padier # 0D
	pbdier # 0E
	_      # 0F
	pa     # 10
	pac    # 11
	paph   # 12
	_      # 13
	pb     # 14
	pbc    # 15
	pbph   # 16
	tm2s   # 17
	gpcc   # 18
	gpcs   # 19
	_ _
	tm2c   # 1c 
	tm2ct  # 1d
	_ _
	lpwmg0c   # 20
	lpwmgclk  # 21
	lpwmg0dth # 22
	lpwmg0dtl # 23
	lpwmgcubh # 24
	lpwmgcubl # 25
	lpwmg1c   # 26
	_
	lpwmg1dth # 28
	lpwmg1dtl # 29
	_ _ 
	lpwmg2c   # 2c
	_
	lpwmg2dth # 2e
	lpwmg2dtl # 2f
	_ _ _ _ _ _ _ _ _ _ 
	_ _ _ _ _ _
];



define pcodeop nop;

:NOP is op0_13=0x0000 {
	nop();	
}

:LDSPTL is op0_13=0x0006 {
	local addr:2 = zext(sp) << 1;
	A = *[rom]:1 addr;
}

:LDSPTH is op0_13=0x0007 {
	local addr:2 = (zext(sp) << 1) + 1;
	A = *[rom]:1 addr;
}

:"ADDC A" is op0_13=0b00000001100000 {
	local res:1 = A + CF;
	ZCAO_add(A, CF);
	A = res;
}

:"SUBC A" is op0_13=0b00000001100001 {
	local res:1 = A - CF;
	ZCAO_sub(A, CF);
	A = res;	
}

:"IZSN A" is op0_13=0b00000001100010 {
	local res:1 = A + 1;
	ZCAO_add(A, 1);
	A = res;
	
	if(A != 0) goto <nojmp>;
	local tmp:2 = inst_start + 6;
	goto [tmp];
	<nojmp>
}

:"DZSN A" is op0_13=0b00000001100011 {
	local res:1 = A - 1;
	ZCAO_sub(A, 1);
	A = res;
	
	if(A != 0) goto <nojmp>;
	local tmp:2 = inst_start + 6;
	goto [tmp];
	<nojmp>
}

define pcodeop unknown;

:unknown1 is op0_13=0b00000001100100 {unknown();}
:unknown2 is op0_13=0b00000001100101 {unknown();}
:unknown3 is op0_13=0b00000001100110 {unknown();}

:"PCADD A" is op0_13=0b00000001100111 {
	A = inst_start + A;
}

:"NOT A" is op0_13=0b00000001101000 {
	A = ~A;
	ZF = A == 0;
}

:"NEG A" is op0_13=0b00000001101001 {
	A = -A;
	ZF = A == 0;
}

:"SR A" is op0_13=0b00000001101010 {
	CF = A & 1;
	A = A >> 1;
}

:"SL A" is op0_13=0b00000001101011 {
	CF = A >> 7;
	A = A << 1;
}

:"SRC A" is op0_13=0b00000001101100 {
	local ocf:1 = CF;
	CF = A & 1;
	A = (A >> 1) | (ocf << 7);
}

:"SLC A" is op0_13=0b00000001101101 {
	local ocf:1 = CF;
	CF = A >> 7;
	A = (A << 1) | ocf;
}

:"SWAP A" is op0_13=0b00000001101110 {
	local tmp:1 = A;
	A = (tmp & 0xF << 4) | ((tmp & 0xF0) >> 4);
}

:unknown4 is op0_13=0b00000001101111 {unknown();}

define pcodeop watchdog_reset;
:WDRESET is op0_13=0b00000001110000 {
	watchdog_reset();
}

:unknown5 is op0_13=0b00000001110001 {unknown();}

:PUSHAF is op0_13=0b00000001110010 {
	*[ram] sp = flag;
	*[ram] (sp+1) = A;
	sp = sp + 2;
}

:POPAF is op0_13=0b00000001110011 {
	sp = sp - 2;
	flag = *[ram] sp;
	A = *[ram] (sp+1);
}

:unknown6 is op0_13=0b00000001110100 {unknown();}

define pcodeop reset;
:RESET is op0_13=0b00000001110101 {
	reset();
}

define pcodeop stopsys;
:STOPSYS is op0_13=0b00000001110110 {
	stopsys();
}

define pcodeop stopexe;
:STOPEXE is op0_13=0b00000001110111 {
	stopexe();
}

define pcodeop interrupt_enable;
:ENGINT is op0_13=0b00000001111000 {
	interrupt_enable();
}

define pcodeop interrupt_disable;
:DISGINT is op0_13=0b00000001111001 {
	interrupt_disable();
}

:RET is op0_13=0b00000001111010 {
	sp = sp - 2;
	local tmp:2 = *[ram]:2 sp;
	return [tmp];
}

define pcodeop reti;
:RETI is op0_13=0b00000001111011 {
	interrupt_enable();
	reti();
	# The spec doesn't specify where the return addr is, guess
	sp = sp - 2;
	local tmp:2 = *[ram]:2 sp;
	return [tmp];
}

#TODO: find mul sku
## Only exists on some SKUs, e.g. PMS134G
#:MUL is op0_12=0x003C {
#	local tmp:2 = zext(A) * zext(mulop);
#	A = tmp:1;
#	mulrh = tmp(1);
#}

:unknown7 is op0_13=0b00000001111101 {unknown();}
:unknown8 is op0_13=0b00000001111110 {unknown();}
:unknown9 is op0_13=0b00000001111111 {unknown();}

# IO

:XOR.IO io", A" is op6_13=0b00000011 & io {
	io = io ^ A;
}

#:MOV.IO io", A" is op5_12=0b00000100 & io {
#	io = A;
#}
#
#:"MOV.IO A," io   is op5_12=0b00000101 & io {
#	A = io;
#	ZF = A == 0;
#}
#
## Memory
#
#:STT16 addr is op5_12=0b00000110 & m3 & op0=0 [addr = m3 << 1;] {
#	Timer16 = *[ram]:2 addr:1;
#}
#
#:LDT16 addr is op5_12=0b00000110 & m3 & op0=1 [addr = m3 << 1;] {
#	*[ram]:2 addr:1 = Timer16;
#}
#
#:IDXM addr", A" is op5_12=0b00000111 & m3 & op0=0 [addr = m3 << 1;]{
#	*[ram]:2 addr:1 = A;
#}
#
#:"IDXM A," addr is op5_12=0b00000111 & m3 & op0=1 [addr = m3 << 1;] {
#	A = *[ram]:1 addr:1;
#}
#
## Return with A
#
#:RET k8 is op8_12=0b00001 & k8 {
#	A = k8;
#	sp = sp - 2;
#	local tmp:2 = *[ram]:2 sp;
#	return [tmp];
#}
#
## Bit ops with memory
#
#:T0SN m4"."n is op8_12=0b00010 & n & op4=0 & m4 {
#	local tmp:1 = *[ram]:1 m4:1;
#	local msk:1 = 1 << n;
#	tmp = tmp & msk;
#	if(tmp != 0) goto inst_next; 
#	local a:2 =inst_next + 2; 
#	goto [a];
#}
#
#:T1SN m4"."n is op8_12=0b00010 & n & op4=1 & m4 {
#	local tmp:1 = *[ram]:1 m4:1;
#	local msk:1 = 1 << n;
#	tmp = tmp & msk;
#	if(tmp == 0) goto inst_next; 
#	local a:2 =inst_next + 2; 
#	goto [a];
#}
#
#:SET0 m4"."n is op8_12=0b00011 & n & op4=0 & m4 {
#	local tmp:1 = *[ram]:1 m4:1;
#	local msk:1 = 1 << n;
#	tmp = tmp & (~msk);
#	*[ram]:1 m4:1 = tmp;
#}
#
#:SET1 m4"."n is op8_12=0b00011 & n & op4=1 & m4 {
#	local tmp:1 = *[ram]:1 m4:1;
#	local msk:1 = 1 << n;
#	tmp = tmp| msk;
#	*[ram]:1 m4:1 = tmp;
#}
#
## Operations with A and memory
#
#:ADD m6", A" is op6_12=0b0010000 & m6 {
#	local EA:1 = m6;
#	local o:1 = *[ram]:1 EA;
#	*[ram]:1 EA = o + A;
#	ZCAO_add(o, A);
#}
#:SUB m6", A" is op6_12=0b0010001 & m6 {
#	local EA:1 = m6;
#	local o:1 = *[ram]:1 EA;
#	*[ram]:1 EA = o - A;
#	ZCAO_sub(o, A);
#}
#
#:ADDC m6", A" is op6_12=0b0010010 & m6 {
#	local m1:1 = *[ram]:1 m6:1;
#	local res:1 = A + m1 + CF;
#	*[ram]:1 m6:1 = res;
#	
#	ZF = res == 0;
#	AC = ((A&0xF + m1&0xF + CF) >> 4) & 1;
#	local ores:2 = ((zext(A&0x7F) + zext(m1&0x7F) + zext(CF))&1)^zext(CF);
#	OV = ores:1;
#	local wres:2 = ((zext(A) + zext(m1) + zext(CF)) >> 8) & 1;
#	CF = wres:1;
#}
#:SUBC m6", A" is op6_12=0b0010011 & m6 {
#	local m1:1 = *[ram]:1 m6:1;
#	local res:1 = m1 - A - CF;
#	*[ram]:1 m6:1 = res;
#	
#	ZF = res == 0;
#	AC = m1&0xF < (A&0xF + CF);
#	local ores:2 = ((zext(m1&0x7F) - zext(A&0x7F) - zext(CF))&1)^zext(CF);
#	OV = ores:1;
#	local wres:2 = ((zext(m1) + zext(A) - zext(CF)) >> 8) & 1;
#	CF = wres:1;
#}
#:AND m6", A" is op6_12=0b0010100 & m6 {
#	local m1:1 = *[ram]:1 m6:1;
#	local val:1 = A & m1;
#	*[ram]:1 m6:1 = val;
#	ZF = val == 0;
#}
#:OR m6", A" is op6_12=0b0010101 & m6 {
#	local m1:1 = *[ram]:1 m6:1;
#	local val:1 = A | m1;
#	*[ram]:1 m6:1 = val;
#	ZF = val == 0;
#}
#:XOR m6", A" is op6_12=0b0010110 & m6 {
#	local m1:1 = *[ram]:1 m6:1;
#	local val:1 = A ^ m1;
#	*[ram]:1 m6:1 = val;
#	ZF = val == 0;
#}
#:MOV m6", A" is op6_12=0b0010111 & m6 {
#	*[ram]:1 m6:1 = A;
#}
#:"ADD A," m6 is op6_12=0b0011000 & m6 {
#	local EA:1 = m6;
#	local o:1 = *[ram]:1 EA;
#	A = A + o;
#	ZCAO_add(A, o);
#}
#:"SUB A," m6 is op6_12=0b0011001 & m6 {
#	local EA:1 = m6;
#	local o:1 = *[ram]:1 EA;
#	A = A - o;
#	ZCAO_sub(A, o);
#}
#:"ADDC A," m6 is op6_12=0b0011010 & m6 {
#	local m1:1 = *[ram]:1 m6:1;
#	local res:1 = A + m1 + CF;
#	
#	ZF = res == 0;
#	AC = ((A&0xF + m1&0xF + CF) >> 4) & 1;
#	local ores:2 = ((zext(A&0x7F) + zext(m1&0x7F) + zext(CF))&1)^zext(CF);
#	OV = ores:1;
#	local wres:2 = ((zext(A) + zext(m1) + zext(CF)) >> 8) & 1;
#	CF = wres:1;
#	
#	A = res;
#}
#:"SUBC A," m6 is op6_12=0b0011011 & m6 {
#	local m1:1 = *[ram]:1 m6:1;
#	local res:1 = A - m1 - CF;
#	
#	ZF = res == 0;
#	AC = A&0xF < (m1&0xF + CF);
#	local ores:2 = ((zext(A&0x7F) - zext(m1&0x7F) - zext(CF))&1)^zext(CF);
#	OV = ores:1;
#	local wres:2 = ((zext(A) + zext(m1) - zext(CF)) >> 8) & 1;
#	CF = wres:1;
#	
#	A = res;
#}
#:"AND A," m6 is op6_12=0b0011100 & m6 {
#	local m1:1 = *[ram]:1 m6:1;
#	A = A & m1;
#	ZF = A == 0;
#}
#:"OR A," m6 is op6_12=0b0011101 & m6 {
#	local m1:1 = *[ram]:1 m6:1;
#	A = A | m1;
#	ZF = A == 0;
#}
#:"XOR A," m6 is op6_12=0b0011110 & m6 {
#	local m1:1 = *[ram]:1 m6:1;
#	A = A ^ m1;
#	ZF = A == 0;
#}
#:"MOV A," m6 is op6_12=0b0011111 & m6 {
#	local m1:1 = *[ram]:1 m6:1;
#	A = m1;
#	ZF = A == 0;
#}
#
## Operations with memory
#:ADDC m6 is op6_12=0b0100000 & m6 {
#	local EA:1 = m6;
#	local o:1 = *[ram]:1 EA;
#	*[ram]:1 EA = o + CF;
#	ZCAO_add(o, CF);
#}
#:SUBC m6 is op6_12=0b0100001 & m6 {
#	local EA:1 = m6;
#	local o:1 = *[ram]:1 EA;
#	*[ram]:1 EA = o - CF;
#	ZCAO_sub(o, CF);
#}
#:IZSN m6 is op6_12=0b0100010 & m6 {
#	local m1:1 = *[ram]:1 m6:1;
#	local res:1 = m1+1;
#	*[ram]:1 m6:1 = res;
#	ZCAO_add(m1, 1);
#	if(res != 0) goto inst_next;
#	local a:2 =inst_next + 2; 
#	goto [a];
#}
#:DZSN m6 is op6_12=0b0100011 & m6 {
#	local m1:1 = *[ram]:1 m6:1;
#	local res:1 = m1-1;
#	*[ram]:1 m6:1 = res;
#	ZCAO_sub(m1, 1);
#	if(res != 0) goto inst_next;
#	local a:2 =inst_next + 2; 
#	goto [a];
#}
#:INC m6 is op6_12=0b0100100 & m6 {
#	local m1:1 = *[ram]:1 m6:1;
#	*[ram]:1 m6:1 = m1+1;
#	ZCAO_add(m1, 1);
#}
#:DEC m6 is op6_12=0b0100101 & m6 {
#	local m1:1 = *[ram]:1 m6:1;
#	*[ram]:1 m6:1 = m1-1;
#	ZCAO_sub(m1, 1);
#}
#:CLEAR m6 is op6_12=0b0100110 & m6 {
#	*[ram]:1 m6:1 = 0;
#}
#:XCH m6 is op6_12=0b0100111 & m6 {
#	local o:1 = *[ram]:1 m6:1;
#	*[ram]:1 m6:1 = A;
#	A = o;
#}
#:NOT m6 is op6_12=0b0101000 & m6 {
#	local m1:1 = *[ram]:1 m6:1;
#	*[ram]:1 m6:1 = ~m1;
#	ZF = A == 0;
#}
#:NEG m6 is op6_12=0b0101001 & m6 {
#	local m1:1 = *[ram]:1 m6:1;
#	*[ram]:1 m6:1 = -m1;
#	ZF = (-m1) == 0;
#}
#:SR m6 is op6_12=0b0101010 & m6 {
#	local m1:1 = *[ram]:1 m6:1;
#	*[ram]:1 m6:1 = m1>>1;
#	CF = m1&1;
#}
#:SL m6 is op6_12=0b0101011 & m6 {
#	local m1:1 = *[ram]:1 m6:1;
#	*[ram]:1 m6:1 = m1<<1;
#	CF = m1>>7;
#}
#:SRC m6 is op6_12=0b0101100 & m6 {
#	local m1:1 = *[ram]:1 m6:1;
#	local ocf:1 = CF;
#	CF = m1 & 1;
#	*[ram]:1 m6:1 = (m1 >> 1) | (ocf << 7);
#}
#:SLC m6 is op6_12=0b0101101 & m6 {
#	local m1:1 = *[ram]:1 m6:1;
#	local ocf:1 = CF;
#	CF = m1 >> 7;
#	*[ram]:1 m6:1 = (m1 << 1) | ocf;
#}
#:"CEQSN A," m6 is op6_12=0b0101110 & m6 {
#	local tmp:1 = *[ram]:1 m6:1;
#	ZCAO_sub(A, tmp);
#	if(tmp != A) goto inst_next;
#	local a:2 =inst_next + 2; 
#	goto [a];
#}
#
#:unknown10 is op6_12=0b0101111 {unknown();}
#
#:T0SN io"."n is op8_12=0b01100 & n & io {
#	local msk:1 = 1 << n;
#	io = io & msk;
#	if(io != 0) goto inst_next; 
#	local a:2 =inst_next + 2; 
#	goto [a];
#}
#:T1SN io"."n is op8_12=0b01101 & n & io {
#	local msk:1 = 1 << n;
#	io = io & msk;
#	if(io == 0) goto inst_next; 
#	local a:2 =inst_next + 2; 
#	goto [a];
#}
#:SET0 io"."n is op8_12=0b01110 & n & io {
#	local msk:1 = 1 << n;
#	io = io & (~msk);
#}
#:SET1 io"."n is op8_12=0b01111 & n & io {
#	local msk:1 = 1 << n;
#	io = io | msk;
#}
#
#:"ADD A," k8 is op8_12=0b10000 & k8 {
#	ZCAO_add(A, k8:1);
#	A = A + k8:1;
#}
#:"SUB A," k8 is op8_12=0b10001 & k8 {
#	ZCAO_sub(A, k8:1);
#	A = A - k8:1;
#}
#:"CEQSN A," k8 is op8_12=0b10010 & k8 {
#	ZCAO_sub(A, k8:1);
#	if(k8:1 != A) goto inst_next;
#	local a:2 =inst_next + 2; 
#	goto [a];
#}
#
#:unknown11 is op8_12=0b10011 & k8 {unknown();}
#
#:"AND A," k8 is op8_12=0b10100 & k8 {
#	A = A & k8:1;
#	ZF = A == 0;
#}
#:"OR A," k8 is op8_12=0b10101 & k8 {
#	A = A | k8:1;
#	ZF = A == 0;
#}
#:"XOR A," k8 is op8_12=0b10110 & k8 {
#	A = A ^ k8:1;
#	ZF = A == 0;
#}
#:"MOV A," k8 is op8_12=0b10111 & k8 {
#	A = k8:1;
#}
#
#:GOTO addr is op10_12=0b110 & k10 [addr = k10 << 1; ] {
#	local a:2 = addr;
#	goto [a];
#}
#:CALL addr is op10_12=0b111 & k10 [addr = k10 << 1; ] {
#	*[ram]:2 sp = inst_next;
#	sp = sp + 2;
#	local a:2 = addr;
#	call [a];
#}
