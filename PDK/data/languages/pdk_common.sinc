define endian=little;
define alignment=2;

define space rom      type=ram_space      size=2 wordsize=1 default; # ROM
define space ram      type=ram_space      size=1 wordsize=1; # SRAM
define space register type=register_space size=1;


define register offset=0x00 size=1 [
	A
];

# IO Registers
define register offset=0x10 size=1 [
	# pdk13 ones
	flag
	sp
	clkmd
	inten
	intrq
	t16m
	mulop
	mulrh
	eoscr
	integs
	padier
	pbdier
	pcdier
	pa
	pac
	paph
	pb
	pbc
	pbph
	pc
	pcc
	pcph
	adcc
	adcm
	adcrh
	adcrl
	adcrgc
	misc
	gpcc
	gpcs
	tm2c
	tm2ct
	tm2s
	tm2b
	tm3c
	tm3ct
	tm3s
	tm3b
	pwmg0c
	pwmg0s
	pwmg0dth
	pwmg0dtl
	pwmg0cubh
	pwmg0cubl
	pwmg1c
	pwmg1s
	pwmg1dth
	pwmg1dtl
	pwmg1cubh
	pwmg1cubl
	pwmg2c
	pwmg2s
	pwmg2dth
	pwmg2dtl
	pwmg2cubh
	pwm2cubl
	# - - - - - 
	# pdk14 ones
	
	lpwmg0c
	lpwmgclk
	lpwmg0dth
	lpwmg0dtl
	lpwmgcubh
	lpwmgcubl
	lpwmg1c
	lpwmg1dth
	lpwmg1dtl 
	lpwmg2c
	lpwmg2dth
	lpwmg2dtl
];

define bitrange ZF=flag[0,1] # Zero result
				CF=flag[1,1] # Carry from op
				AC=flag[2,1] # 4-bit overflow
				OV=flag[3,1] # Sign change
;


macro ZCAO_add(a, b) {
	ZF = (a + b) == 0;
	AC = carry(a&0xF, b&0xF);
	OV = carry(a&0x7F, b&0x7F) ^ CF;
	CF = carry(a, b);
}

macro ZCAO_sub(a, b) {
	ZF = (a - b) == 0;
	AC = scarry(a&0xF, b&0xF);
	OV = scarry(a&0x7F, b&0x7F) ^ CF;
	CF = scarry(a, b);
}